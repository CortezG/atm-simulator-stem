#include <stdio.h>
#include "exprtk/exprtk.hpp"

typedef exprtk::symbol_table<double> symbol_table_t;
typedef exprtk::expression<double> expression_t;
typedef exprtk::parser<double> parser_t;

double f(double x, double y, expression_t& expression) {
    symbol_table_t symbol_table;
    symbol_table.add_variable("x", x);
    symbol_table.add_variable("y", y);
    symbol_table.add_constants();

    expression.register_symbol_table(symbol_table);
    return expression.value();
}

void rungeKutta(expression_t& expression, double x0, double y0, double xf, int n) {
    double h = (xf - x0) / n;
    double x = x0;
    double y = y0;

    for (int i = 0; i < n; i++) {
        double k1 = h * f(x, y, expression);
        double k2 = h * f(x + h/2, y + k1/2, expression);
        double k3 = h * f(x + h/2, y + k2/2, expression);
        double k4 = h * f(x + h, y + k3, expression);

        y = y + (k1 + 2*k2 + 2*k3 + k4) / 6;
        x = x + h;

        printf("x = %.4f, y = %.4f\n", x, y);
    }
}

int main() {
    expression_t expression;
    symbol_table_t symbol_table;
    parser_t parser;

    std::string expression_string;

    printf("Digite a expressao para f(x, y): ");
    getline(std::cin, expression_string);

    if (!parser.compile(expression_string, expression)) {
        printf("Erro na compilação da expressão.\n");
        return 1;
    }

    double x0, y0, xf;
    int n;

    printf("Digite o valor inicial de x: ");
    scanf("%lf", &x0);
    printf("Digite o valor inicial de y: ");
    scanf("%lf", &y0);
    printf("Digite o valor final de x: ");
    scanf("%lf", &xf);
    printf("Digite a quantidade de pontos (n): ");
    scanf("%d", &n);

    printf("Resultados:\n");
    rungeKutta(expression, x0, y0, xf, n);

    return 0;
}


